using UnityEngine;namespace SelectedEffectWireframe{	public class WireframeSkinnedMesh : MonoBehaviour	{		public enum ETriggerMethod { MouseMove = 0, MousePress };		[Header("Trigger")]		public ETriggerMethod m_TriggerMethod = ETriggerMethod.MouseMove;		public bool m_Persistent = false;		[Header("Basic")]		public Material m_MatWireframe;		[Range(0f, 0.5f)] public float m_Width = 0.05f;		[Range(0.1f, 3f)] public float m_AASmooth = 1.5f;		public Color m_Color = Color.green;		public bool m_Quad = false;		public bool m_CullBack = true;		[Header("Glow")]		public bool m_Glow = false;		public Color m_GlowColor = Color.white;		[Range(0f, 1f)] public float m_GlowDist = 0.35f;		[Range(0f, 1f)] public float m_GlowPower = 0.5f;		[Header("Hollow")]		public bool m_Hollow = false;		[Range(0f, 0.99f)] public float m_Cutoff = 0.8f;		[Header("Scanline")]		public bool m_Scanline = false;		public float m_ScanlineDensity = 1f;		public float m_ScanlineSpeed = 3f;		[Range(0f, 1f)] public float m_ScanlineWidth = 0.3f;		[Range(0f, 2f)] public float m_ScanlineFade = 0.8f;		Renderer m_Rd;		Material[] m_BackupMaterials;		Texture2D[] m_BackupMainTexs;		bool m_IsMouseOn = false;		void Awake()		{			m_Rd = GetComponent<Renderer>();			// cache all original materials			Material[] mats = m_Rd.materials;			int len = mats.Length;			m_BackupMaterials = new Material[len];			m_BackupMainTexs = new Texture2D[len];			for (int i = 0; i < len; i++)			{				m_BackupMaterials[i] = mats[i];				m_BackupMainTexs[i] = mats[i].mainTexture as Texture2D;			}		}		void UpdateSelfParameters()		{			Material[] mats = m_Rd.materials;			for (int i = 0; i < mats.Length; i++)			{				if (m_Quad)					mats[i].EnableKeyword("ENABLE_QUAD");				else					mats[i].DisableKeyword("ENABLE_QUAD");				if (m_Glow)					mats[i].EnableKeyword("ENABLE_GLOW");				else					mats[i].DisableKeyword("ENABLE_GLOW");				mats[i].SetColor("_GlowColor", m_GlowColor);				mats[i].SetFloat("_GlowDist", m_GlowDist);				mats[i].SetFloat("_GlowPower", m_GlowPower);				if (m_Scanline)					mats[i].EnableKeyword("ENABLE_SCANLINE");				else					mats[i].DisableKeyword("ENABLE_SCANLINE");				mats[i].SetFloat("_ScanlineDensity", m_ScanlineDensity);				mats[i].SetFloat("_ScanlineSpeed", m_ScanlineSpeed);				mats[i].SetFloat("_ScanlineWidth", m_ScanlineWidth);				mats[i].SetFloat("_ScanlineFade", m_ScanlineFade);				if (m_Hollow)					mats[i].EnableKeyword("ENABLE_HOLLOW");				else					mats[i].DisableKeyword("ENABLE_HOLLOW");				mats[i].SetFloat("_Cutoff", m_Cutoff);				mats[i].mainTexture = m_BackupMainTexs[i];				mats[i].SetFloat("_WireThickness", m_Width);				mats[i].SetFloat("_AASmooth", m_AASmooth);				mats[i].SetColor("_WireColor", m_Color);				mats[i].SetInt("_Cull", m_CullBack ? (int)UnityEngine.Rendering.CullMode.Back : (int)UnityEngine.Rendering.CullMode.Off);			}		}		void FxEnable(bool enable)		{			if (enable)			{				int len = m_Rd.materials.Length;				Material[] mats = new Material[len];				for (int i = 0; i < len; i++)					mats[i] = m_MatWireframe;				m_Rd.materials = mats;			}			else			{				m_Rd.materials = m_BackupMaterials;			}		}		void OnMouseEnter()		{			if (m_TriggerMethod == ETriggerMethod.MouseMove)				FxEnable(true);			m_IsMouseOn = true;		}		void OnMouseExit()		{			if (!m_Persistent)				FxEnable(false);			m_IsMouseOn = false;		}		void Update()		{			if (m_TriggerMethod == ETriggerMethod.MousePress)			{				bool on = m_IsMouseOn && Input.GetMouseButton(1);				if (on)					FxEnable(true);				else					FxEnable(false);			}			UpdateSelfParameters();		}	}}