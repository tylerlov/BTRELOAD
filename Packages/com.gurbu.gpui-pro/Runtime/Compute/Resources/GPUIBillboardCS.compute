// GPU Instancer Pro
// Copyright (c) GurBu Technologies

// Dilate billboard texture
#pragma kernel CSBillboardDilate

#include_with_pragmas "Packages/com.gurbu.gpui-pro/Runtime/Compute/Include/PlatformDefines.hlsl"
#include "Packages/com.gurbu.gpui-pro/Runtime/Compute/Include/Matrix.hlsl"

RWTexture2D<float4> result;
Texture2D<float4> billboardSource;
uint2 billboardSize;
uint frameCount;
bool isLinearSpace;
bool isNormal;

[numthreads(GPUI_THREADS_2D, GPUI_THREADS_2D, 1)]
void CSBillboardDilate(uint3 id : SV_DispatchThreadID)
{
    uint frameWidth = billboardSize.x / frameCount;

    if (id.x > frameWidth)
        return;

    uint indexX = id.x + (id.z * frameWidth); // shift x by frames.

    uint2 offsets[8] = { uint2(-1, 0), uint2(1, 0), uint2(0, 1), uint2(0, -1), uint2(-1, 1), uint2(1, 1), uint2(1, -1), uint2(-1, -1) };
    
    float4 color = billboardSource.Load(uint3(indexX, id.y, 0));

    if (color.a < 1)
    {
        bool exit = false;

        for (int s = 1; s < 64; s++)
        {
            for (int n = 0; n < 8; n++)
            {
                uint2 offset = offsets[n];
                
                uint3 neighbourCoord = uint3(indexX + (offset.x * s), id.y + (offset.y * s), 0);

                if (neighbourCoord.x >= frameWidth * (id.z + 1) || neighbourCoord.x < frameWidth * id.z)
                    continue;

                float4 neighbourCol = billboardSource.Load(neighbourCoord);
                
                if (neighbourCol.a > 0)
                {
                    color.rgb = neighbourCol.rgb;

                    // There will be a bright outline if the normal alpha is 0 at the edges.
                    if (isNormal && color.a == 0)
                        color.a = 1;
                    
                    exit = true;
                    break;
                }
            }
            if (exit)
                break;
        }


    }

    result[uint2(indexX, id.y)] = isLinearSpace ? float4(LinearToGamma(color.rgb), color.a) : color;
}